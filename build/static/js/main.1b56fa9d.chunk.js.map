{"version":3,"sources":["Map.jsx","App.js","serviceWorker.js","index.js"],"names":["Map","props","mapStyle","mapType","weight","mapTypeColor","mapTypeColorOpacity","type","symbol","size","color","outline","width","languageCheck","feature","a","featuresList","graphic","store","attributes","HtmlRender","regexState","state","STATE","match","undefined","COUNTY","regexCounty","county","length","url","axios","defaults","headers","post","get","then","res","census","data","console","log","i","mapRef","React","createRef","loadModules","css","MapView","FeatureLayer","LayerList","languageTemplate","title","content","usOutline","outFields","renderer","popupTemplate","congressional","map","basemap","layers","view","container","current","center","zoom","layerList","ui","add","position","className","ref","this","Component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b56fa9d.chunk.js","sourcesContent":["import React from \"react\";\nimport { loadModules } from 'esri-loader';\nimport axios from 'axios';\nimport { stat } from \"fs\";\n\n\n\n\nclass Map extends React.Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n  }\n  componentDidMount() {\n    // create map\n    loadModules(['esri/Map', 'esri/views/MapView','esri/layers/FeatureLayer',\"esri/widgets/LayerList\"], { css: true })\n    .then(([Map, MapView,FeatureLayer,LayerList]) => {\n\n      const languageTemplate = {\n        title: \"Top Language Category\",\n        content: this.languageCheck\n      };\n      \n     \n      const usOutline = new FeatureLayer({\n        // URL to the service\n        url: \"https://services6.arcgis.com/hERbCYWNM6zA0Lns/arcgis/rest/services/us_outline/FeatureServer/0?token=hqiXZHYfeGFlhpC_2pO5lkpMP4homAZ2yH-lp2PUdTETAqAjE2x5gZcRkYJYzgw9Xj_r5tLDQpi3B8BVs6sRLygCqT96IR0GT3UMq8Ie8p3bV9opxqG4v7_DzJUYPXWX6sLEQ1tzwL7ee6x5Bvzy2_P0O3CiT_T521BsFAAAobNEK_r5RnfD_IaX1lgJy__XlEMqwF4Zk9sGSKF-EQZy-yAY5xRLcZz_mnxdlMj8tvdcJ7UNx2bYISm41VDQ8Psh\"\n        ,outFields : [\"*\"]\n      });\n      \n      usOutline.renderer = this.mapStyle(\"USA\",4)\n    \n      const county = new FeatureLayer({\n        // URL to the service\n        url:\"https://services6.arcgis.com/hERbCYWNM6zA0Lns/arcgis/rest/services/county/FeatureServer/0?token=cHOgwSl9Z3KlsN1-ouC_0FLLT2f_ni4dZahxmyC9pMbvrUqJhbjgkNxPbTPox7GQL0NHKVmXl7dIwyDBQYLxeHULLOcaUlyh2ZHiJcxs8ee92MLlihUJDCoFaNoOgTfhSKuWvhMgGl7bWiY-5XxITxPsfNM9IfzlVsbShJsA8f69IoYVFyC1g0Z3jvBFylFKI3Ix1qxJmA7RlDGKkMF_1vrut0lQBxXaI3UL7OwZ3XWHn9iav-HN0t8Rq6LjuFlR\",\n        outFields : [\"*\"]\n      });\n\n      county.renderer = this.mapStyle(\"county\",2)\n      county.popupTemplate=languageTemplate;\n\n      const state = new FeatureLayer({\n        // URL to the service\n        url:\"https://services6.arcgis.com/hERbCYWNM6zA0Lns/arcgis/rest/services/states/FeatureServer/0?token=Fv44uxmOv4FURhIzMj-ZTR8ZYUu9xalc9xwInMG4_Yq2repzEhRx18NmzPuNRFRTPNAI2mxTPY3FKhGvmn2rNYnORZYBaxfX-YYuaIcSBN_bgGfcVe5Ag7ytOk00cb5PQykQtbTn17nyNct_4ez5xhzIfms2YYEKB1Oj4nQNOUtpLss99BD9-fDjZGgmn4dAzIsQSkgbiX_CO5CGoLzq1gG7kY8OrNV4An9phQyBSaCLoYKlBGcXwYksNOQRcSS8\",\n        outFields : [\"*\"]\n      \n      });\n      \n     state.renderer = this.mapStyle(\"state\",2)\n     state.popupTemplate=languageTemplate;\n   \n     \n\n      const congressional = new FeatureLayer({\n        // URL to the service\n        url:\"https://services6.arcgis.com/hERbCYWNM6zA0Lns/arcgis/rest/services/congressional/FeatureServer/0?token=GCYgmd6hqd7jPSh7cP72ZJaFlaLvAKDyJgidegGN7136QVPcSYG7M8oSoRC_wI-QYMBBvsvBNT6jebc11Mdh4MDpFAN2jVAhGmDYyzDRZdF0m71XiCZXGvowJw1frNH_F4uNicoviPcQMGxVzdEn5eZSzskn7_UsIBUjryH_wcO9pt1sprzZ1nxIio0rJ-_hc3NKog2T3BHMOXyChb3eofYNYKOqi16w_r09x18-yqHy4CSAdPmFxVQ9IVZeVnzE\",\n        outFields : [\"*\"]\n      });\n\n      congressional.renderer =this.mapStyle(\"congressional\",2) \n        \n     \n\n\n\n      const map = new Map({\n        basemap: \"topo-vector\",\n        layers:[county,congressional,state,usOutline]\n      });\n\n      this.view = new MapView({\n        container: this.mapRef.current,\n        map: map,\n        center: [-118, 34],\n        zoom: 8\n       \n      \n      });\n\n      \n        var layerList = new LayerList({\n          view: this.view\n\n      });\n        // Add widget to the top right corner of the view\n        this.view.ui.add(layerList, {\n          position: \"top-right\"\n        });\n\n    });\n   \n  }\n  componentDidUpdate() {\n    // check if data has changed\n   \n  }\n\n  mapStyle=(mapType,weight)=> {\n  \n    let mapTypeColor;\n    let mapTypeColorOpacity;\n    switch(mapType){\n\n       case \"USA\":\n       mapTypeColor=[141, 211, 199];\n       mapTypeColorOpacity=[141, 211, 199,0.3]\n       break;    \n       case \"state\":\n       mapTypeColor=[127, 201, 127];\n       mapTypeColorOpacity=[127, 201, 127,0.3]\n       break;\n       case \"county\":\n        mapTypeColor=[190, 186, 218];\n        mapTypeColorOpacity=[190, 186, 218, 0.3]\n       break;\n       case \"congressional\":\n        mapTypeColor=[253, 141, 60];\n        mapTypeColorOpacity=[253, 141, 60, 0.3]\n       break;\n       default :\n       mapTypeColor=[255,255,255];\n       mapTypeColorOpacity=[255,255,255,0.3]\n\n\n    }\n\n    return  {\n        type: \"simple\",  // autocasts as new SimpleRenderer()\n        symbol: {\n          type: \"simple-fill\",  // autocasts as new SimpleMarkerSymbol()\n          size: 5,\n          color:mapTypeColorOpacity,\n          outline: {  // autocasts as new SimpleLineSymbol()\n            width: weight,\n            color: mapTypeColor,\n            \n          }\n        }\n      };\n     \n  }\n\n  languageCheck=async (feature) =>{\n      const featuresList=feature.graphic[\"__accessor__\"].store[\"_values\"].attributes\n     \n    let state,county,url;\n    let HtmlRender='<div>No Languages Results Found!</div>'\n    let regexState = /\\d{2}/g\n    state=\"\"+featuresList.STATE\n    if(state.match(regexState)!==null){\n       \n    }else{\n        state=\"0\"+state;\n    }\n    \n    if(featuresList.COUNTY!==undefined){\n      let regexCounty = /\\d{3}/g\n      county=\"\"+featuresList.COUNTY\n      if(county.match(regexCounty)!==null){\n        \n      }else{\n         \n         county=(county.length===1)?\"00\"+county:\"0\"+county;\n      }\n      \n    url=`https://api.census.gov/data/2013/language?get=EST,LAN7,LANLABEL,NAME&for=county:${county}&in=state:${state}&key=c6b213357c951f788c3eb1916c6d718c59b55a8d`\n    }else{\n\n    url=`https://api.census.gov/data/2013/language?get=EST,LAN7,LANLABEL,NAME&for=state:${state}&key=c6b213357c951f788c3eb1916c6d718c59b55a8d`\n    \n    }\n   \n    axios.defaults.headers.post['Content-Type'] = 'application/json';\n\n   await axios.get(url)\n   \n    .then(res => {\n      const census= res.data;\n      console.log(\"what is the data\",census)\n     \n      if(res.data!==\"\"){\n      \n      HtmlRender=\"<div>\";\n      for(let i=0;i<census.length;i++){\n        if(i!==0){\n         HtmlRender+=`<ol><li>EST Population:${census[i][0]}</li>\n         <li>LAN7:${census[i][1]}</li>\n         <li>LANLABEL:${census[i][2]}</li>\n         <li>NAME:${census[i][3]}</li>\n         <li>LOCATION:${census[i][4]}</li>\n         </ol>\n         <hr>\n         `\n        }\n      }\n      HtmlRender+=\"</div>\"\n      return HtmlRender;\n    }\n    \n   \n    \n  }) \n    return HtmlRender;\n  }\n  \n \n  render() {\n     return(\n     <div className=\"webmap\" ref={this.mapRef} />\n     )\n  }\n}\n\nexport default Map;\n","import React from 'react';\nimport Map from \"./Map\"\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Map/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}